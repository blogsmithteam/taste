rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isFollowing(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/following/$(userId));
    }

    function isNoteOwner() {
      return isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    function isFriend(userId) {
      return isAuthenticated() && (
        // Either the current user is following the target user
        userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following ||
        // Or the target user has the current user as a follower
        request.auth.uid in get(/databases/$(database)/documents/users/$(userId)).data.followers
      );
    }
    
    function isFamilyMember(userId) {
      return isAuthenticated() && (
        userId in resource.data.familyMembers ||
        request.auth.uid in resource.data.familyMembers
      );
    }

    function canModifyFamilyMembers(userId) {
      let incomingData = request.resource.data;
      let currentData = resource.data;
      
      // Allow if user is modifying their own document
      let isOwnDocument = isOwner(userId);
      
      // Allow if user is being added/removed as a family member
      let isFamilyOperation = 
        incomingData.diff(currentData).affectedKeys().hasOnly(['familyMembers', 'updatedAt']) &&
        (
          // Adding exactly one family member
          (incomingData.familyMembers.size() == currentData.familyMembers.size() + 1 &&
           incomingData.familyMembers.removeAll(currentData.familyMembers).size() == 1) ||
          // Removing exactly one family member
          (incomingData.familyMembers.size() == currentData.familyMembers.size() - 1 &&
           currentData.familyMembers.removeAll(incomingData.familyMembers).size() == 1)
        );
      
      return isOwnDocument || isFamilyOperation;
    }
    
    function isPublic() {
      return 'visibility' in resource.data && resource.data.visibility == 'public';
    }
    
    function isFriendsOnly() {
      return 'visibility' in resource.data && resource.data.visibility == 'friends';
    }

    function isSharedWithUser() {
      return isAuthenticated() && 
        request.auth.uid in resource.data.sharedWith;
    }

    function isPrivateProfile() {
      return 'settings' in resource.data && 
        'isPrivate' in resource.data.settings && 
        resource.data.settings.isPrivate == true;
    }

    function isBasicProfile() {
      return isAuthenticated();
    }

    function isValidUserData(data) {
      return data.username is string &&
        data.username.size() >= 3 &&
        data.email is string &&
        data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
        'settings' in data &&
        'isPrivate' in data.settings &&
        data.settings.isPrivate is bool &&
        (!('familyMembers' in data) || data.familyMembers is list);
    }

    function isValidPartialUpdate(data) {
      let hasValidUsername = !('username' in data) || (data.username is string && data.username.size() >= 3);
      let hasValidEmail = !('email' in data) || (data.email is string && data.email.matches('^[^@]+@[^@]+\\.[^@]+$'));
      let hasValidBio = !('bio' in data) || (data.bio is string && data.bio.size() <= 500);
      let hasValidSettings = !('settings' in data) || (
        data.settings is map &&
        (!('isPrivate' in data.settings) || data.settings.isPrivate is bool)
      );
      let hasValidFamilyMembers = !('familyMembers' in data) || data.familyMembers is list;
      
      return hasValidUsername && 
        hasValidEmail && 
        hasValidBio && 
        hasValidSettings &&
        hasValidFamilyMembers;
    }

    function canModifyFollowing(userId) {
      let incomingData = request.resource.data;
      let currentData = resource.data;
      
      // Allow if user is modifying their own document
      let isOwnDocument = isOwner(userId);
      
      // Allow if user is being added/removed as a follower/following
      let isFollowOperation = 
        (incomingData.diff(currentData).affectedKeys().hasOnly(['following', 'updatedAt']) ||
         incomingData.diff(currentData).affectedKeys().hasOnly(['followers', 'updatedAt'])) &&
        (
          // Adding exactly one follower/following
          (incomingData.following.size() == currentData.following.size() + 1 ||
           incomingData.followers.size() == currentData.followers.size() + 1) ||
          // Removing exactly one follower/following
          (incomingData.following.size() == currentData.following.size() - 1 ||
           incomingData.followers.size() == currentData.followers.size() - 1)
        );
      
      return isOwnDocument || isFollowOperation;
    }

    function canViewPrivateProfile(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return !userDoc.data.settings.isPrivate || 
             isOwner(userId) || 
             (userDoc.data.settings.isPrivate && isFollowing(userId));
    }

    function canViewBasicProfile(userId) {
      return isAuthenticated();
    }

    function canViewNote(noteData) {
      let noteOwner = noteData.userId;
      let ownerDoc = get(/databases/$(database)/documents/users/$(noteOwner));
      
      return isOwner(noteOwner) || 
             noteData.visibility == 'public' ||
             (noteData.visibility == 'friends' && (
               // For non-private profiles, allow viewing if authenticated
               !ownerDoc.data.settings.isPrivate ||
               // For private profiles, require following
               (ownerDoc.data.settings.isPrivate && isFollowing(noteOwner))
             )) ||
             (request.auth.uid in noteData.sharedWith);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        canViewBasicProfile(userId) ||
        canViewPrivateProfile(userId)
      );
      
      allow create: if isAuthenticated() && isValidUserData(request.resource.data);
      
      allow update: if isAuthenticated() && (
        // Allow users to update their own profile
        (isOwner(userId) && isValidPartialUpdate(request.resource.data)) ||
        // Allow family member operations
        canModifyFamilyMembers(userId) ||
        // Allow follow/unfollow operations
        canModifyFollowing(userId)
      );
      
      allow delete: if false;
      
      match /following/{followedId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow write: if isOwner(userId);
      }

      match /followers/{followerId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isOwner(followerId));
        allow write: if isOwner(followerId);
      }

      match /favorites/{restaurantId} {
        allow read: if isAuthenticated();  // Allow any authenticated user to read favorites
        allow write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Follow requests collection
    match /follow_requests/{requestId} {
      allow read: if isAuthenticated() && (
        // Allow reading if user is the sender or recipient
        request.auth.uid == resource.data.fromUserId ||
        request.auth.uid == resource.data.toUserId
      );
      
      allow create: if isAuthenticated() && (
        // Allow creating if user is the sender and data is valid
        request.resource.data.fromUserId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.keys().hasOnly(['fromUserId', 'toUserId', 'status', 'createdAt'])
      );
      
      allow update: if isAuthenticated() && (
        // Only allow recipient to update status
        request.auth.uid == resource.data.toUserId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
        request.resource.data.status in ['accepted', 'rejected']
      );
      
      allow delete: if isAuthenticated() && (
        // Allow deletion by either party
        request.auth.uid == resource.data.fromUserId ||
        request.auth.uid == resource.data.toUserId
      );
    }

    // Notes collection
    match /notes/{noteId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        resource.data.visibility == 'public' ||
        (resource.data.visibility == 'friends' && (
          // For non-private profiles, allow viewing if authenticated
          !get(/databases/$(database)/documents/users/$(resource.data.userId)).data.settings.isPrivate ||
          // For private profiles, require following
          (get(/databases/$(database)/documents/users/$(resource.data.userId)).data.settings.isPrivate && isFollowing(resource.data.userId))
        )) ||
        request.auth.uid in resource.data.sharedWith
      );
      
      // Allow listing notes shared with the user
      allow list: if isAuthenticated() && (
        // Base case - allow if user is authenticated
        true
      );
      
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        // Allow liking/unliking if user can view the note
        (canViewNote(resource.data) && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy', 'updatedAt']))
      );
      
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Restaurants collection with nested menuItems
    match /restaurants/{restaurantId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.name is string && 
        request.resource.data.name.size() > 0;
      allow update: if isAuthenticated();
      allow delete: if false;

      match /menuItems/{menuItemId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.name is string && 
          request.resource.data.name.size() > 0;
        allow update: if isAuthenticated();
        allow delete: if false;
      }
    }

    // Recipe creators collection
    match /recipeCreators/{creatorId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.name is string && 
        request.resource.data.name.size() > 0;
      allow update: if isAuthenticated();
      allow delete: if false;
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated() && (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        resource.data.userId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        isValidActivityData(request.resource.data);

      allow update: if isAuthenticated() &&
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'likedBy', 'comments']));
    }

    match /activity_comments/{commentId} {
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/activities/$(resource.data.activityId)) &&
        get(/databases/$(database)/documents/activities/$(resource.data.activityId)).data.userId in
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following;

      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid &&
        isValidCommentData(request.resource.data);
    }

    function isValidActivityBasics(data) {
      return data.type in ['note_created', 'note_updated', 'started_following'] &&
        data.timestamp is timestamp &&
        data.userId is string &&
        data.targetId is string &&
        data.username is string &&
        data.likes is number && data.likes >= 0 &&
        data.comments is number && data.comments >= 0 &&
        data.likedBy is list;
    }

    function isValidActivityMetadata(data) {
      let hasValidTitle = !('title' in data) || data.title is string;
      let hasValidImageUrl = !('imageUrl' in data) || data.imageUrl is string;
      let hasValidRating = !('rating' in data) || (data.rating is number && data.rating >= 0 && data.rating <= 5);
      let hasValidTags = !('tags' in data) || (data.tags is list && data.tags.size() <= 10);
      
      return hasValidTitle && hasValidImageUrl && hasValidRating && hasValidTags;
    }

    function isValidActivityLocation(data) {
      return !('location' in data) || (
        data.location is map &&
        'name' in data.location &&
        data.location.name is string &&
        (!('address' in data.location) || data.location.address is string)
      );
    }

    function isValidActivityUserData(data) {
      let hasValidNotes = !('notes' in data) || data.notes is string;
      let hasValidTargetUsername = !('targetUsername' in data) || data.targetUsername is string;
      let hasValidTargetProfilePicture = !('targetProfilePicture' in data) || data.targetProfilePicture is string;
      
      return hasValidNotes && hasValidTargetUsername && hasValidTargetProfilePicture;
    }

    function isValidActivityData(data) {
      return isValidActivityBasics(data) &&
        isValidActivityMetadata(data) &&
        isValidActivityLocation(data) &&
        isValidActivityUserData(data);
    }

    function isValidCommentData(data) {
      let hasValidActivityId = data.activityId is string;
      let hasValidUserId = data.userId is string;
      let hasValidComment = data.comment is string && 
        data.comment.size() > 0 && 
        data.comment.size() <= 1000;
      let hasValidTimestamp = data.timestamp is timestamp;

      return hasValidActivityId &&
        hasValidUserId &&
        hasValidComment &&
        hasValidTimestamp;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid ||
        resource.data.senderId == request.auth.uid
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.type in ['follow', 'follow_request', 'follow_request_accepted', 'follow_request_rejected', 'note_shared', 'note_liked', 'note_commented'] &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.read is bool &&
        request.resource.data.recipientId is string &&
        request.resource.data.senderUsername is string &&
        (!('senderProfilePicture' in request.resource.data) || request.resource.data.senderProfilePicture is string) &&
        (!('targetId' in request.resource.data) || request.resource.data.targetId is string) &&
        (!('title' in request.resource.data) || request.resource.data.title is string);
      
      allow update: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      
      allow delete: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid ||
        resource.data.senderId == request.auth.uid
      );
    }

    // Bookmarks collection
    match /bookmarks/{bookmarkId} {
      function isValidBookmarkData() {
        let data = request.resource.data;
        return data.userId == request.auth.uid &&
               data.noteId is string &&
               data.createdAt is timestamp &&
               data.keys().hasOnly(['userId', 'noteId', 'createdAt']);
      }

      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && isValidBookmarkData();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow list: if isAuthenticated() && request.query.limit <= 100;
    }
  }
}