rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isFriend(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/following/$(userId));
    }
    
    function isPublic() {
      return resource.data.visibility == 'public';
    }
    
    function isFriendsOnly() {
      return resource.data.visibility == 'friends';
    }

    function isValidUserData(data) {
      return data.username is string &&
        data.username.size() >= 3 &&
        data.email is string &&
        data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isValidPartialUpdate(data) {
      let hasValidUsername = !('username' in data) || (data.username is string && data.username.size() >= 3);
      let hasValidBio = !('bio' in data) || (data.bio is string && data.bio.size() <= 500);
      let hasValidPreferences = !('dietaryPreferences' in data) || (
        data.dietaryPreferences is list &&
        data.dietaryPreferences.size() <= 12 &&  // Maximum number of preferences
        data.dietaryPreferences.hasAll([]) // Remove the strict validation temporarily
      );
      let hasValidAllergies = !('allergies' in data) || data.allergies is list;
      let hasValidSettings = !('settings' in data) || (
        data.settings is map &&
        (!('isPrivate' in data.settings) || data.settings.isPrivate is bool) &&
        (!('emailNotifications' in data.settings) || data.settings.emailNotifications is bool) &&
        (!('language' in data.settings) || data.settings.language == 'en')
      );
      let hasValidFollowers = !('followers' in data) || (
        data.followers is list &&
        data.followers.size() <= 10000 // Reasonable limit for followers
      );
      let hasValidFollowing = !('following' in data) || (
        data.following is list &&
        data.following.size() <= 5000 // Reasonable limit for following
      );
      
      return hasValidUsername && 
        hasValidBio && 
        hasValidPreferences && 
        hasValidAllergies && 
        hasValidSettings &&
        hasValidFollowers &&
        hasValidFollowing;
    }

    // Users collection
    match /users/{userId} {
      // Allow read if:
      // 1. The user is accessing their own profile
      // 2. The profile is public
      // 3. The user is a follower and the profile is friends-only
      // 4. The user is authenticated and listing users (for discover page)
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        !resource.data.settings.isPrivate ||
        (resource.data.settings.isPrivate && isFriend(userId)) ||
        (request.query.limit <= 12 && // Limit to reasonable page size
         (('settings.isPrivate' in request.query.orderBy && 'username' in request.query.orderBy) || // Allow compound queries
          request.query.orderBy == 'username'))
      );
      
      // Allow create if authenticated and data is valid
      allow create: if isAuthenticated() && isValidUserData(request.resource.data);
      
      // Allow update if:
      // 1. User is updating their own profile
      // 2. The update is a follow/unfollow operation
      allow update: if isAuthenticated() && (
        // Allow users to update their own profile
        (isOwner(userId) && isValidPartialUpdate(request.resource.data)) ||
        // Allow follow/unfollow operations
        (
          // Only allow updating followers and updatedAt fields
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers', 'updatedAt']) &&
          (
            // Adding to followers array
            (request.resource.data.followers.size() == resource.data.followers.size() + 1 &&
             request.resource.data.followers.removeAll(resource.data.followers).size() == 1 &&
             request.resource.data.followers.removeAll(resource.data.followers)[0] == request.auth.uid) ||
            // Removing from followers array
            (request.resource.data.followers.size() == resource.data.followers.size() - 1 &&
             resource.data.followers.removeAll(request.resource.data.followers).size() == 1 &&
             resource.data.followers.removeAll(request.resource.data.followers)[0] == request.auth.uid)
          )
        ) ||
        // Allow updating own following list
        (isOwner(userId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['following', 'updatedAt']) &&
          (
            // Adding to following array
            (request.resource.data.following.size() == resource.data.following.size() + 1 &&
             request.resource.data.following.removeAll(resource.data.following).size() == 1) ||
            // Removing from following array
            (request.resource.data.following.size() == resource.data.following.size() - 1 &&
             resource.data.following.removeAll(request.resource.data.following).size() == 1)
          )
        )
      );
      
      // Allow delete if user is deleting their own profile
      allow delete: if isOwner(userId);
      
      // Following subcollection
      match /following/{followedId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }

      // Followers subcollection
      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(followerId);
      }
    }

    // Notes collection
    match /notes/{noteId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isPublic() || 
        (isFriendsOnly() && isFriend(resource.data.userId))
      );
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Restaurants collection with nested menuItems
    match /restaurants/{restaurantId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.name is string && 
        request.resource.data.name.size() > 0;
      allow update: if isAuthenticated();
      allow delete: if false; // No deletion allowed

      // Menu items subcollection
      match /menuItems/{menuItemId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.name is string && 
          request.resource.data.name.size() > 0;
        allow update: if isAuthenticated();
        allow delete: if false; // No deletion allowed
      }
    }

    // Recipe creators collection
    match /recipeCreators/{creatorId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.name is string && 
        request.resource.data.name.size() > 0;
      allow update: if isAuthenticated();
      allow delete: if false; // No deletion allowed
    }
  }
}