rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isNoteOwner() {
      return isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    function isFriend(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/following/$(userId));
    }
    
    function isPublic() {
      return resource.data.visibility == 'public';
    }
    
    function isFriendsOnly() {
      return resource.data.visibility == 'friends';
    }

    function isSharedWithUser() {
      return isAuthenticated() && 
        request.auth.uid in resource.data.sharedWith;
    }

    function isValidUserData(data) {
      return data.username is string &&
        data.username.size() >= 3 &&
        data.email is string &&
        data.email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isValidPartialUpdate(data) {
      let hasValidUsername = !('username' in data) || (data.username is string && data.username.size() >= 3);
      let hasValidBio = !('bio' in data) || (data.bio is string && data.bio.size() <= 500);
      let hasValidPreferences = !('dietaryPreferences' in data) || (
        data.dietaryPreferences is list &&
        data.dietaryPreferences.size() <= 12
      );
      let hasValidAllergies = !('allergies' in data) || data.allergies is list;
      let hasValidSettings = !('settings' in data) || (
        data.settings is map &&
        (!('isPrivate' in data.settings) || data.settings.isPrivate is bool) &&
        (!('emailNotifications' in data.settings) || data.settings.emailNotifications is bool) &&
        (!('language' in data.settings) || data.settings.language == 'en')
      );
      let hasValidFollowers = !('followers' in data) || (
        data.followers is list &&
        data.followers.size() <= 10000
      );
      let hasValidFollowing = !('following' in data) || (
        data.following is list &&
        data.following.size() <= 5000
      );
      
      return hasValidUsername && 
        hasValidBio && 
        hasValidPreferences && 
        hasValidAllergies && 
        hasValidSettings &&
        hasValidFollowers &&
        hasValidFollowing;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        !resource.data.settings.isPrivate ||
        (resource.data.settings.isPrivate && isFriend(userId)) ||
        (request.query.limit <= 12 && 
         (('settings.isPrivate' in request.query.orderBy && 'username' in request.query.orderBy) || 
          request.query.orderBy == 'username' ||
          'email' in request.query.where))
      );
      
      allow create: if isAuthenticated() && isValidUserData(request.resource.data);
      
      allow update: if isAuthenticated() && (
        (isOwner(userId) && isValidPartialUpdate(request.resource.data)) ||
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followers', 'updatedAt']) &&
          (
            (request.resource.data.followers.size() == resource.data.followers.size() + 1 &&
             request.resource.data.followers.removeAll(resource.data.followers).size() == 1 &&
             request.resource.data.followers.removeAll(resource.data.followers)[0] == request.auth.uid) ||
            (request.resource.data.followers.size() == resource.data.followers.size() - 1 &&
             resource.data.followers.removeAll(request.resource.data.followers).size() == 1 &&
             resource.data.followers.removeAll(request.resource.data.followers)[0] == request.auth.uid)
          )
        ) ||
        (isOwner(userId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['following', 'updatedAt']) &&
          (
            (request.resource.data.following.size() == resource.data.following.size() + 1 &&
             request.resource.data.following.removeAll(resource.data.following).size() == 1) ||
            (request.resource.data.following.size() == resource.data.following.size() - 1 &&
             resource.data.following.removeAll(request.resource.data.following).size() == 1)
          )
        )
      );
      
      allow delete: if isOwner(userId);
      
      match /following/{followedId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }

      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(followerId);
      }
    }

    // Notes collection
    match /notes/{noteId} {
      allow read: if isAuthenticated() && (
        isNoteOwner() || 
        isPublic() || 
        (isFriendsOnly() && isFriend(resource.data.userId)) ||
        isSharedWithUser()
      );
      allow create: if isAuthenticated();
      allow update: if isNoteOwner();
      allow delete: if isNoteOwner();
    }

    // Restaurants collection with nested menuItems
    match /restaurants/{restaurantId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.name is string && 
        request.resource.data.name.size() > 0;
      allow update: if isAuthenticated();
      allow delete: if false; // No deletion allowed

      // Menu items subcollection
      match /menuItems/{menuItemId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.name is string && 
          request.resource.data.name.size() > 0;
        allow update: if isAuthenticated();
        allow delete: if false; // No deletion allowed
      }
    }

    // Recipe creators collection
    match /recipeCreators/{creatorId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.name is string && 
        request.resource.data.name.size() > 0;
      allow update: if isAuthenticated();
      allow delete: if false; // No deletion allowed
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if isAuthenticated() && (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.following.hasAny([resource.data.userId])
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        isValidActivityData(request.resource.data);
    }

    function isValidActivityData(data) {
      let hasValidType = data.type in ['note_created', 'note_updated', 'started_following'];
      let hasValidTimestamp = data.timestamp is timestamp;
      let hasValidUserId = data.userId is string;
      let hasValidTargetId = data.targetId is string;
      let hasValidUsername = data.username is string;
      let hasValidTitle = !('title' in data) || data.title is string;
      
      return hasValidType && 
        hasValidTimestamp && 
        hasValidUserId && 
        hasValidTargetId && 
        hasValidUsername &&
        hasValidTitle;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid ||
        resource.data.senderId == request.auth.uid
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.type in ['follow', 'note_shared', 'note_liked', 'note_commented'] &&
        request.resource.data.timestamp is timestamp &&
        request.resource.data.read is bool;
      
      allow update: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      
      allow delete: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid ||
        resource.data.senderId == request.auth.uid
      );
    }
  }
}