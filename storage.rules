rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size < 5 * 1024 * 1024; // 5MB max
    }

    function isValidProfileImage() {
      return request.resource.contentType.matches('image/.*') &&
        request.resource.size < 2 * 1024 * 1024; // 2MB max for profile pictures
    }

    function isValidImageMetadata() {
      return request.resource.metadata != null &&
        request.resource.metadata.uploadedBy == request.auth.uid;
    }

    function isValidThumbnail() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size < 500 * 1024; // 500KB max for thumbnails
    }

    function debugLog(message) {
      return debug(message);
    }

    function hasNoteAccess(noteId) {
      let note = firestore.get(/databases/(default)/documents/notes/$(noteId)).data;
      let isPublic = note.visibility == 'public';
      let isFriendsOnly = note.visibility == 'friends';
      let isSharedWithUser = note.sharedWith != null && request.auth.uid in note.sharedWith;
      let userProfile = firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data;
      let isOwner = note.userId == request.auth.uid;
      let isFamilyMember = note.familyMembers != null && request.auth.uid in note.familyMembers;
      let isFollowing = userProfile.following != null && note.userId in userProfile.following;
      
      return isAuthenticated() && (
        isOwner || // Note owner
        isPublic || // Public note
        (isFriendsOnly && isFollowing) || // Friends only and following
        isSharedWithUser || // Explicitly shared
        isFamilyMember // Family member
      );
    }

    // Profile pictures - simplified rules
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(userId) && isValidProfileImage();
      allow delete: if isOwner(userId);
    }

    // Note images - enhanced with metadata validation and debugging
    match /notes/{noteId}/images/{fileName} {
      allow read: if hasNoteAccess(noteId);
      
      allow create: if isAuthenticated() 
        && isValidImage() &&
        isValidImageMetadata();
      
      allow update: if isAuthenticated() &&
        isValidImage() &&
        isValidImageMetadata() &&
        resource.metadata.uploadedBy == request.auth.uid;
      
      allow delete: if isAuthenticated() &&
        resource.metadata.uploadedBy == request.auth.uid;
    }

    // Thumbnails
    match /notes/{noteId}/thumbnails/{fileName} {
      allow read: if hasNoteAccess(noteId);
      
      allow create: if isAuthenticated() 
        && isValidThumbnail()
        && isValidImageMetadata();
      
      allow delete: if isAuthenticated()
        && resource.metadata.uploadedBy == request.auth.uid;
    }

    // Temporary uploads path for in-progress uploads
    match /temp/{userId}/{fileName} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidImage();
      allow delete: if isOwner(userId);
    }
  }
}
